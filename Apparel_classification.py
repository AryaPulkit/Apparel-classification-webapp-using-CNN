# -*- coding: utf-8 -*-
"""FashionApparel_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aL_gqdisdODjbjUBq-FhYlCXAUSiLltK
"""

import tensorflow as tf
tf.test.gpu_device_name()

import numpy as np
from keras.datasets import fashion_mnist

#loading Fashion MNIST dataset
(x_train,y_train),(x_test,y_test) = fashion_mnist.load_data()

#Exploring the dataset
#checking shape and size of train and test set
print(str(len(x_train)),str(len(y_train)))
print(str(x_train[0].shape))
print(str(x_test[0].shape))

y_train

#Visualizing images
import matplotlib.pyplot as plt

plt.subplot(231) #subplot argument means 2 rows , columns and index 1 for this subplot
random_num = np.random.randint(0,len(x_train))
plt.imshow(x_train[random_num])

plt.subplot(232) #Visualizing grayscale images
plt.imshow(x_train[random_num],cmap=plt.get_cmap('gray'))

plt.subplot(233) 
random_num2 = np.random.randint(0,len(x_train))
plt.imshow(x_train[random_num2])

plt.subplot(234) 
plt.imshow(x_train[random_num2],cmap=plt.get_cmap('gray'))

plt.subplot(235) 
random_num3 = np.random.randint(0,len(x_train))
plt.imshow(x_train[random_num3])

plt.subplot(236) 
plt.imshow(x_train[random_num3],cmap=plt.get_cmap('gray'))

#importing keras libraries

from keras.utils import np_utils
import keras
from keras.models import Sequential
from keras.layers import Dense,Dropout,Flatten
from keras.layers import Conv2D,MaxPooling2D,BatchNormalization
from keras import backend as K

#Set the training parameters
batch_size = 128

#storing the number of rows and columns for reshaping 
img_rows = x_train[0].shape[0]
img_cols = x_train[1].shape[0]

#keras input format (number of samples ,rows,columns,channel )
x_train = x_train.reshape(x_train.shape[0],img_rows,img_cols,1) #channel = 1 for grayscale and 3 for RGB
x_test = x_test.reshape(x_test.shape[0],img_rows,img_cols,1)

#storing the shape of single image
input_shape = (img_rows,img_cols,1)

#changing the image  to float32 data type
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

#Scaling the image pixel range (0-255) to (0-1)
x_train /= 255 #since image pixels ranges from 0 to 255 we divide by 255 to get values between 0 to 1
x_test /= 255 

#Performing one hot encoding
y_train = np_utils.to_categorical(y_train) 
y_test = np_utils.to_categorical(y_test)

#Number of classes and number of pixels
num_classes = y_test.shape[1]
num_pixels = x_train.shape[1]*x_train.shape[2]

#Creating a CNN Model
model = Sequential()

model.add(Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=input_shape))
model.add(BatchNormalization())

model.add(Conv2D(64,kernel_size=(3,3),activation='relu'))
model.add(BatchNormalization())

model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(BatchNormalization())

model.add(Dropout(0.5))
model.add(Dense(num_classes,activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer = keras.optimizers.Adadelta(),metrics=['accuracy'])
print(model.summary())

#Training models
cnn_model = model.fit(x_train,y_train,batch_size=batch_size,epochs=100,verbose=1,validation_data=(x_test,y_test))
score = model.evaluate(x_test,y_test,verbose=0)

print('Test loss:', score[0])
print('Test Accuracy:', score[1])

import os
os.chdir('/content/drive/My Drive/Colab Notebooks/image classifier/clothing')

#saving the model
model.save('clothing_classification_model.h5')

